// Build script for OpenTerrainGenerator for Forge

buildscript
{
    repositories
    {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven
        {
            url = "http://files.minecraftforge.net/maven"
        }
        maven
        {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies
    {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'signing'

// Project properties
archivesBaseName = "openterraingenerator-forge"
description = "OpenTerrainGenerator for Minecraft Forge"
ext.forgeVersion = "1.12.2-14.23.1.2555"
minecraft.version = ext.forgeVersion
minecraft.runDir = "run"
minecraft.mappings = "snapshot_20171218"

repositories
{
    mavenCentral()
    mavenLocal()
}

dependencies
{
    compile project(':common')
	compile 'com.google.guava:guava:17.0'
}

// Replace text in mcmod.info
processResources
{
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // Replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs)
    {
        include 'mcmod.info'

        // Replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // Copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs)
    {
        exclude 'mcmod.info'
    }
}

// Include all OpenTerrainGenerator files in the jar
jar
{
    destinationDir = new File(project.buildDir, "distributions")
    classifier = ''
    from
    {
        project(":common").sourceSets.main.output.files
    }
}

// Package OTG-Core jar inside the OTG-Forge jar.

reobf {
    asmJar {}
    rootJar {}
}

task asmJar(type: Jar, dependsOn: 'compileJava') {
    from (sourceSets.main.output) {
        // Include all of your coremod files here
        // Example line >> include "testmod/asm/**"
		include "com/pg85/otg/forge/asm/**"
    }
    archiveName = "OTG-Core.jar" // You can change this to anything you wish, remember to change it below also
    manifest {
        // Your previous manifest attributes go here
        // Example line >> attributes 'FMLCorePlugin': 'testmod.asm.TweakPlugin'
		attributes 'FMLCorePlugin': 'com.pg85.otg.forge.asm.launch.OTGCorePlugin'
		attributes 'FMLCorePluginContainsMod': 'true'
    }
}

task rootJar(type: Jar, dependsOn: ['compileJava', asmJar]) {

	manifest
    {
		attributes 'ContainedDeps': 'OTG-Core.jar'
        attributes 'FMLAT': 'openterraingenerator_at.cfg'
	}

    from (sourceSets.main.output) {
        // Exclude all of your coremod files here
        // Example line >> exclude "testmod/asm/**"
		exclude "com/pg85/otg/forge/asm/OTGClassTransformer.class"
		exclude "com/pg85/otg/forge/asm/OTGHooks.class"
		exclude "com/pg85/otg/forge/asm/launch/**"
    }
    from ("build/libs") {
        include "OTG-Core.jar" // If you changed the name above, change it here also.
    }
	
	destinationDir = new File(project.buildDir, "distributions")

    // Leave the following line commented out to overwrite the default jar,
    //    otherwise <basename>-root.jar will be created, containing the embedded coremod jar
    // classifier = 'root'
}

// task signAsmJar(type: SignJar, dependsOn: reobfAsmJar) {
//     onlyIf { // Skip the task if our secret data isn't available
//         project.hasProperty('keyStore')
//     }
//     keyStore = project.keyStore // This needs to be a path to the keystore file
//     alias = project.keyStoreAlias
//     storePass = project.keyStorePass
//     keyPass = project.keyStoreKeyPass
//     inputFile = jar.archivePath // TODO: Sign a jar inside a jar? Find a better solution?
//     outputFile = jar.archivePath // TODO: Sign a jar inside a jar? Find a better solution?
// }

// task signJar(type: SignJar, dependsOn: reobfJar) {
//     onlyIf { // Skip the task if our secret data isn't available
//         project.hasProperty('keyStore')
//     }
//     keyStore = project.keyStore // This needs to be a path to the keystore file
//     alias = project.keyStoreAlias
//     storePass = project.keyStorePass
//     keyPass = project.keyStoreKeyPass
//     inputFile = jar.archivePath
//     outputFile = jar.archivePath
// }

build.dependsOn rootJar
//build.dependsOn signJar
//build.dependsOn signAsmJar // TODO: Figure out a way to sign the asm jar
